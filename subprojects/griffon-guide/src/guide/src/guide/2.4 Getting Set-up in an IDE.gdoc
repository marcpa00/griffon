h3. IntelliJ IDEA

[IntelliJ IDEA|http://www.jetbrains.com/idea] and the [JetGroovy|http://www.jetbrains.net/confluence/display/GRVY/Groovy+Home] plug-in offer good support for Groovy/Grails/Griffon developers. Refer to the section on [Groovy and Grails|http://www.jetbrains.com/idea/features/groovy_grails.html] support on the JetBrains website for a feature overview.

h4. Integrating an existing Griffon project

IntelliJ 10 and newer supports Griffon form the get go. You can open existing projects as well as create new ones. However you can also create the required IntelliJ project files by running the following command:

{code}
griffon integrate-with --intellij
{code}

h4. Creating a new Griffon project

Follow these steps to create and run a new Griffon project with IDEA

*#1* Bring up the "New Project" wizard. You should see Griffon as one of the available options

!griffon-idea.1.png!

*#2* Choose name and location for the new project

!griffon-idea.2.png!

*#3* Configure a Griffon SDK if you haven't done so already

!griffon-idea.3.png!

*#4* Click on the Finish button and develop with pleasure your Griffon project

!griffon-idea.4.png!

h3. NetBeans

A good Open Source alternative is Oracle's NetBeans, which provides a Groovy/Griffon plugin that automatically recognizes Griffon projects and provides the ability to run Griffon applications in the IDE, code completion and integration with Oracle's Glassfish server.

h4. Integrating an existing Griffon project

NetBeans does not require any special integration support, it understands the layout of a Griffon project as long as the Griffon plugin is installed. Just select "Open" from the menu and locate the folder that contains your project. It's that simple. Follow these steps to install the Griffon NetBeans plugin.

*Prerequisites*: Java, Groovy and Grails plugins installed and up to date.

*#1* Download the plugin

Follow this [link|http://plugins.netbeans.org/PluginPortal/faces/PluginDetailPage.jsp?pluginid=18664] to download the latest zip distribution of the plugin.

*#2* Unpack the zip file into a directory of your choosing

*#3* Open the plugin manager dialog. Go to the "Downloaded" tab, then click on the "Add Plugins..." button. Locate and select the NBM files that were uncompressed in the previous step.

*#4* Select both plugins (using the checkboxes) and click on "Install".

!griffon-nb.1.png!

*#5* Restart your IDE and enjoy!


h4. Creating a new Griffon project

*Prerequisites*: You must have the Griffon plugin installed. Follow the steps explained in the previous section to get the job done.

*#1* Bring up the "New Project" wizard. Click on "Groovy" then on "Griffon Application".

!griffon-nb.2.png!

*#2* Choose name and location for the new project

!griffon-nb.3.png!

*#3* Configure a Griffon SDK if you haven't done so already

!griffon-nb.4.png!

*#4* Click on the Finish button

!griffon-nb.5.png!

h3. Eclipse

We recommend that users of "Eclipse":http://www.eclipse.org/ looking to develop Griffon application take a look at [SpringSource Tool Suite|http://www.springsource.com/products/sts], which offers built in support for Groovy.

h4. Integrating an existing Griffon project

To integrate Griffon with Eclipse run the following command to generate appropriate project files:

{code}
griffon integrate-with --eclipse
{code}

Then follow these steps to fully integrate and run the application

*#1* Install the [Eclipse Support|http://artifacts.griffon-framework.org/plugin/eclipse-support] plugin
{code}
griffon install-plugin eclipse-support
{code}

*#2* Configure a pair Classpath User Variables in the preferences dialog. GRIFFON_HOME should point to the install directory of Griffon, while USER_HOME should point to your account's home directory.

!griffon-eclipse.1.png!

*#3* Bring up the "New Project" wizard. Select "Existing Projects into Workspace"

!griffon-eclipse.2.png!

*#4* Select the directory of the application that contains .project/.classpath files

!griffon-eclipse.3.png!

*#4* Click on the Finish button

!griffon-eclipse.4.png!

h5. Running Griffon commands within Eclipse

We'll rely on Eclipse's Ant support to get the job done, but first we need to generate an Ant build file

{code}
griffon integrate-with --ant
{code}

Refresh the contents of your project. Open the build file in the Ant View. Select any target and execute by double clicking on it.

!griffon-eclipse.5.png!

h3. TextMate

Since Griffon' focus is on simplicity it is often possible to utilize more simple editors and "TextMate":http://macromates.com/ on the Mac has an excellent Groovy/Griffon bundle available.

Follow these steps to install the Groovy bundle

*#1* Create a local bundle directory

bc.
mkdir ~/Library/Application\ Support/TextMate/Bundles/

*#2a* If you have git installed then just clone the repository

bc.
cd ~/Library/Application\ Support/TextMate/Bundles/
git clone https://github.com/textmate/groovy.tmbundle.git

*#2b* Alternatively download a copy of the latest version from [github|https://github.com/textmate/groovy.tmbundle/zipball/master] as a zip and unpack it. Rename the unpacked directory to @groovy.tmbundle@.

Follow these steps to install the Griffon bundle

*#1* Create a local bundle directory

bc.
mkdir ~/Library/Application\ Support/TextMate/Bundles/

*#2a* If you have git installed then just clone the repository

bc.
cd ~/Library/Application\ Support/TextMate/Bundles/
git clone https://github.com/griffon/griffon.tmbundle.git

*#2b* Alternatively download a copy of the latest version from [github|https://github.com/griffon/griffon.tmbundle/zipball/master] as a zip and unpack it. Rename the unpacked directory to @griffon.tmbundle@.

Now configure the @PATH@ environment variable within TextMate. Make sure that @$GRIFFON_HOME/bin@ in expanded form is set

!griffon-tm.1.png!

h4. Integrating an existing Griffon project

To integrate Griffon with TextMate run the following command to generate appropriate project files:

{code}
griffon integrate-with --textmate
{code}

Alternatively TextMate can easily open any project with its command line integration by issuing the following command from the root of your project:

{code}
mate .
{code}

You should see a similar display like the next one

!griffon-tm.2.png!

h5. Running Griffon commands within TextMate

The Griffon bundle provides new commands under the "Bundles" menu. Search for the "Griffon submenu".

!griffon-tm.3.png!

Selecting "Run App" will execute the [run-app|commandLine] command on the currently open project

!griffon-tm.4.png!

h3. Sublime Text 2

To integrate Griffon with Sublime Text 2 run the following command to generate appropriate project files:

{code}
griffon integrate-with --sublimetext2
{code}

Now go the @Project@ menu, locate the generated project file and open it. You should get a screen similar to the next one

!griffon-st2.1.png!