Griffon is most definitely an opinionated framework and it prefers convention to configuration, but this doesn't mean you _can't_ configure it. In this section, we look at how you can influence and modify the standard Griffon build.

h3. The defaults

In order to customize a build, you first need to know _what_ you can customize. The core of the Griffon build configuration is the @griffon.util.BuildSettings@ class, which contains quite a bit of useful information. It controls where classes are compiled to, what dependencies the application has, and other such settings.

Here is a selection of the configuration options and their default values:
{table}
 *Property* | *Config option* | *Default value*
 griffonWorkDir | griffon.work.dir | $USER_HOME/.griffon/<griffonVersion>
 projectWorkDir | griffon.project.work.dir | <griffonWorkDir>/projects/<baseDirName>
 classesDir | griffon.project.class.dir | <projectWorkDir>/classes
 testClassesDir | griffon.project.test.class.dir | <projectWorkDir>/test-classes
 testReportsDir | griffon.project.test.reports.dir | <projectWorkDir>/test/reports
 resourcesDir | griffon.project.resource.dir | <projectWorkDir>/resources
 projectPluginsDir | griffon.plugins.dir | <projectWorkDir>/plugins
{table}

The @BuildSettings@ class has some other properties too, but they should be treated as read-only:
{table}
 *Property* | *Description*
 baseDir | The location of the project.
 userHome | The user's home directory.
 griffonHome | The location of the Griffon installation in use (may be null).
 griffonVersion | The version of Griffon being used by the project.
 griffonEnv | The current Griffon environment.
 compileDependencies | A list of compile-time project dependencies as @File@ instances.
 testDependencies | A list of test-time project dependencies as @File@ instances.
 runtimeDependencies | A list of runtime-time project dependencies as @File@ instances.
{table}

Of course, these properties aren't much good if you can't get hold of them. Fortunately that's easy to do: an instance of @BuildSettings@ is available to your scripts via the @griffonSettings@ script variable. You can also access it from your code by using the @griffon.util.BuildSettingsHolder@ class, but this isn't recommended.

h3. Overriding the defaults

All of the properties in the first table can be overridden by a system property or a configuration option - simply use the "config option" name. For example, to change the project working directory, you could either run this command:
{code}
griffon -Dgriffon.project.work.dir=work compile
{code}
or add this option to your @griffon-app/conf/BuildConfig.groovy@ file:
{code}
griffon.project.work.dir = "work"
{code}
Note that the default values take account of the property values they depend on, so setting the project working directory like this would also relocate the compiled classes, test classes, resources, and plugins.

What happens if you use both a system property and a configuration option? Then the system property wins because it takes precedence over the @BuildConfig.groovy@ file, which in turn takes precedence over the default values.

h3. Available build settings

{table}
 Name | Description
 griffon.testing.patterns | A list of Ant path patterns that allow you to control which files are included in the tests. The patterns should not include the test case suffix, which is set by the next property.
{table}
